package pages;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import utils.ExceptionHandler;
import utils.SmartElementFinder;
import java.time.Duration;

public class HomePage {
    private static final Logger logger = LogManager.getLogger(HomePage.class);
    private final WebDriver driver;
    private final WebDriverWait wait;

    @FindBy(id = "nav-logo-sprites")
    private WebElement amazonLogo;

    @FindBy(id = "twotabsearchtextbox")
    private WebElement searchBox;

    @FindBy(id = "nav-search-submit-button")
    private WebElement searchButton;

    public HomePage(WebDriver driver) {
        this.driver = driver;
        this.wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        PageFactory.initElements(driver, this);
    }

    public boolean isLogoDisplayed() {
        logger.debug("Checking logo visibility");
        return ExceptionHandler.handleException(driver, "check logo visibility", d -> {
            WebElement logo = SmartElementFinder.findElement(d, By.id("nav-logo-sprites"), "Amazon Logo");
            wait.until(ExpectedConditions.visibilityOf(logo));
            return logo.isDisplayed();
        });
    }

    public SearchResultsPage searchProduct(String productName) {
        if (productName == null || productName.trim().isEmpty()) {
            throw new IllegalArgumentException("Product name cannot be null or empty");
        }

        logger.debug("Searching for: {}", productName);
        final String searchTerm = productName.trim();

        return ExceptionHandler.handleException(driver, "perform search", d -> {
            WebElement searchInput = SmartElementFinder.findElement(d, By.id("twotabsearchtextbox"), "Search Box");
            WebElement searchBtn = SmartElementFinder.findElement(d, By.id("nav-search-submit-button"), "Search Button");

            wait.until(ExpectedConditions.elementToBeClickable(searchInput));
            searchInput.clear();
            searchInput.sendKeys(searchTerm);

            wait.until(ExpectedConditions.elementToBeClickable(searchBtn));
            searchBtn.click();

            wait.until(ExpectedConditions.urlContains("s?k="));
            return new SearchResultsPage(d);
        });
    }
}
            
            // Ensure the search term is entered correctly
            wait.until(driver -> search.getAttribute("value").equals(productName.trim()));
            
            // Wait for search button and ensure it's clickable
            wait.until(ExpectedConditions.elementToBeClickable(searchButton));
            
            // Try multiple click strategies
            try {
                wait.until(ExpectedConditions.elementToBeClickable(searchButton)).click();
            } catch (Exception e) {
                try {
                    ((JavascriptExecutor) driver).executeScript("arguments[0].click();", searchButton);
                } catch (Exception je) {
                    // Final fallback: try submitting the form
                    search.submit();
                }
            }
            
            // Wait for URL to change, indicating search is initiated
            wait.until(driver -> driver.getCurrentUrl().contains("s?k="));
            
            return new SearchResultsPage(driver);
        } catch (Exception e) {
            System.out.println("Error during search: " + e.getMessage());
            throw new RuntimeException("Failed to perform search: " + e.getMessage());
        }
    }

    public String getPageTitle() {
        return driver.getTitle();
    }

    public boolean isSearchBoxEnabled() {
        return wait.until(ExpectedConditions.elementToBeClickable(searchBox)).isEnabled();
    }
}
